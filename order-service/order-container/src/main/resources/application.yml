server:
  port: 8181

logging:
  level:
    hu.paulintamas.foodorderingsystem: DEBUG

order-service:
  customer-topic-name: customer
  payment-request-topic-name: payment-request
  payment-response-topic-name: payment-response
  restaurant-approval-request-topic-name: restaurant-approval-request
  restaurant-approval-response-topic-name: restaurant-approval-response
  outbox-scheduler-fixed-rate: 10000
  outbox-scheduler-initial-delay: 10000

spring:
  jpa:
    open-in-view: false
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=order&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    username: user
    password: password
    driver-class-name: org.postgresql.Driver
    platform: postgres
  sql:
    init:
      mode: ALWAYS
      schema-locations: classpath:init-schema.sql

kafka-config:
  bootstrap-servers: localhost:9092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8600

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  # Good balance os speed, CPU and network utilization
  compression-type: snappy
  # Wait for ack from each broker
  acks: all
  # 16 kilobyte
  batch-size: 16384
  batch-size-boost-factor: 100
  # Add a delay on producer, increases the batch size
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  payment-consumer-group-id: payment-topic-consumer
  restaurant-approval-consumer-group-id: restaurant-approval-topic-consumer
  customer-group-id: customer-consumer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  # Consume the data in batches instead of one-by-one
  batch-listener: true
  # Automatically start kafka consumer
  auto-startup: true
  # Multiple threads set to 3
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  # Can fetch max 500 record with each poll
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  # Do no wait too much between polls
  poll-timeout-ms: 150